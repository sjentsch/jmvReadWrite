[{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/CONTRIBUTING.html","id":"opening-issues","dir":"","previous_headings":"","what":"Opening issues","title":"Contributing to jmvReadWrite","text":"easiest way note behavioural curiosities request new features opening issue.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to jmvReadWrite","text":"’d like contribute changes jmvReadWrite, GitHub flow used proposing, submitting, reviewing, accepting changes. haven’t done , ’s nice overview git, well best practices submitting pull requests R packages book Hadley Wickham Jenny Bryan. also welcome contribute checks / tests jmvReadWrite. Please discuss proposed new checks opening issue GitHub repository. jmvReadWrite coding style follows commonly used tidyverse style guide.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/articles/jmvReadWrite.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"R package `jmvReadWrite`","text":"R, can either install stable version jmvReadWrite available CRAN using following command: can install development version jmvReadWrite package GitHub:","code":"install.packages(\"jmvReadWrite\") if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"sjentsch/jmvReadWrite\")"},{"path":"https://sjentsch.github.io/jmvReadWrite/articles/jmvReadWrite.html","id":"how-to-use-the-package","dir":"Articles","previous_headings":"","what":"How to use the package?","title":"R package `jmvReadWrite`","text":"read_omv following code uses ToothGrowth-data set part data sets included R (current file contains modifications though testing reading writing routines: read_omv write_omv). data set, syntax conduct ANOVA run. results similar obtained running analysis jamovi (using GUI). , open file menu (☰) choose Open, Data Library ToothGrowth. Afterwards, click ANOVA-button Analyses-tab choose ANOVA. , assign variable len Dependent Variable supp dose Fixed Factors. Afterwards, choose / tick Overall Model Test ω². Open drop-menu Assumption Checks tick Homogeneity test Normality test. results identical apart table output looks nicer jamovi (text, ), numbers rounded maybe one two cosmetic differences. want copy syntax generated jamovi, switch Syntax Mode. Afterwards, syntax shown top analysis can copied . Since version 0.2.0, read_omv also extracts syntax analyses may conducted jamovi-GUI stored .omv-file. extract , set parameter getSyn = TRUE calling read_omv (default FALSE). parameter set, analyses stored attribute syntax. can used shown following examples:  write_omv jmvReadWrite-package also enables write .omv-files order use jamovi. Let’s assume large collection log-files (e.g., experiment) compile process (summarize, filter, etc.) R order later analyse jamovi. processed log-files stored data frame (called, e.g., data) write file can open jamovi afterwards. Although jamovi reads R-data files (.RData, .rda, .rds) write_omv permits store jamovi-specific attributes (variable labels) addition. Please note reading .omv-file order write back .omv-file (perhaps modifications), recommended leave sveAtt-attribute set TRUE (default). Trial.omv example kept, look like original file (plus possible modifications). , e.g., added new column, adjust attributes (e.g., enforce specific columnType measurementType): just look attributes stored columns. Helper functions jmvReadWrite contains number helper functions assist data management tasks frequently required: arrange_cols_omv: Re-arranges columns data file requested order. convert_to_omv: Converts data sets file formats jamovi-format. function may helpful convert larger amount files. describe_omv: Adds title description data set. function may helpful documenting contained data set, e.g. publishing repository OSF, generated data sets, e.g. used teaching. distances_omv: Calculates wide range distances measures (continuous, frequency binary data). can determined, whether calculation distances carried columns / variables rows / units observation. original data can standardized distances calculated. long2wide_omv: Converts data set long wide format: Time points repeated measurements arranged rows original converted columns. wide2long_omv: Converts data set wide long format: Time points repeated measurements arranged columns original converted rows. merge_cols_omv: Add variables several data sets, .e. variables / columns second, etc. input data set added columns first data set. merge_rows_omv: Add cases several data sets, .e. cases / rows second, etc. data set added rows first data set. sort_omv: Sort data set according one variable(s). transform_vars_omv: Transform skewed variables (aiming better conform normal distribution). transpose_omv: Transpose data set: Make rows columns vice versa.","code":"fleOMV <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleOMV) # if the \"jmv\"-package is installed, we can run a test analysis with the data if (\"jmv\" %in% rownames(installed.packages())) {     jmv::ANOVA(         formula = len ~ supp + dose + supp:dose,         data = data,         effectSize = c(\"omega\"),         modelTest = TRUE,         homo = TRUE,         norm = TRUE)     } #>  #>  ANOVA #>  #>  ANOVA - len                                                                                       #>  ────────────────────────────────────────────────────────────────────────────────────────────────  #>                     Sum of Squares    df    Mean Square    F            p             ω²           #>  ────────────────────────────────────────────────────────────────────────────────────────────────  #>    Overall model         2740.1033     5      548.02067    41.557178    < .0000001                 #>    supp                   205.3500     1      205.35000    15.571979     0.0002312    0.0554519    #>    dose                  2426.4343     2     1213.21717    91.999965    < .0000001    0.6925788    #>    supp:dose              108.3190     2       54.15950     4.106991     0.0218603    0.0236466    #>    Residuals              712.1060    54       13.18715                                            #>  ────────────────────────────────────────────────────────────────────────────────────────────────  #>  #>  #>  ASSUMPTION CHECKS #>  #>  Homogeneity of Variances Test (Levene's)  #>  ────────────────────────────────────────  #>    F           df1    df2    p            #>  ────────────────────────────────────────  #>    1.940130      5     54    0.1027298    #>  ────────────────────────────────────────  #>  #>  #>  Normality Test (Shapiro-Wilk)  #>  ─────────────────────────────  #>    Statistic    p            #>  ─────────────────────────────  #>    0.9849884    0.6694242    #>  ───────────────────────────── fleOMV <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleOMV, getSyn = TRUE) # shows the syntax of the analyses from the .omv-file # please note that syntax extraction may not work on all systems # if the syntax couldn't be extracted, an empty list (length = 0) is returned, # otherwise, the syntax of the analyses from the .omv-file is shown and # the commands of the first and the second analysis are run, with the # output of the second analysis assigned to the variable result if (length(attr(data, \"syntax\")) >= 2) {     attr(data, \"syntax\")     # if the \"jmv\"-package is installed, we can run the analyses in \"syntax\"     if (\"jmv\" %in% rownames(installed.packages())) {         eval(parse(text = attr(data, \"syntax\")[[1]]))         eval(parse(text = paste0(\"result = \", attr(data, \"syntax\")[[2]])))         names(result)         # -> \"main\"      \"assump\"    \"contrasts\" \"postHoc\"   \"emm\"         # (the names of the five output tables)     } } #> [1] \"main\"      \"assump\"    \"contrasts\" \"postHoc\"   \"emm\"       \"residsOV\" # use the data set \"ToothGrowth\" and, if it exists, write it as jamovi-file # using write_omv() data(\"ToothGrowth\", package = \"jmvReadWrite\") # \"retDbg\" has to be set in order to return debug information to wrtDta wrtDta <- jmvReadWrite::write_omv(ToothGrowth, \"Trial.omv\", retDbg = TRUE) names(wrtDta) #> [1] \"mtaDta\" \"xtdDta\" \"dtaFrm\" # -> \"mtaDta\" \"xtdDta\" \"dtaFrm\" # this debug information contains a list with the metadata (\"mtaDta\", e.g., # column and data type), the extended data (\"xtdDta\", e.g., variable lables), # and the data frame (dtaFrm) for checking (understanding the file format) and # debugging  # check whether the file was written to the disk, get the file information (size, etc.) # and delete the file afterwards list.files(\".\", \"Trial.omv\") #> [1] \"Trial.omv\" file.info(\"Trial.omv\") #>           size isdir mode               mtime               ctime #> Trial.omv 2617 FALSE  644 2024-11-11 10:23:38 2024-11-11 10:23:38 #>                         atime  uid gid  uname grname #> Trial.omv 2024-11-11 10:23:38 1001 127 runner docker unlink(\"Trial.omv\") # reading and writing a file with the \"sveAtt\"-parameter permits you to keep # essential meta-data to ensure that the written file looks and works like the # original file (plus you modifications) fleOMV <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleOMV, sveAtt = TRUE) # shows the names of the attributes for the whole data set (e.g., number of # rows and columns) and the names of the attributes of the first column names(attributes(data)) #> [1] \"names\"       \"row.names\"   \"class\"       \"fltLst\"      \"removedRows\" #> [6] \"addedRows\"   \"transforms\" names(attributes(data[[1]])) #>  [1] \"name\"           \"id\"             \"columnType\"     \"dataType\"       #>  [5] \"measureType\"    \"formula\"        \"formulaMessage\" \"parentId\"       #>  [9] \"width\"          \"type\"           \"importName\"     \"description\"    #> [13] \"transform\"      \"edits\"          \"missingValues\"  \"filterNo\"       #> [17] \"active\" # # perhaps do some modifications to the file here and write it back afterwards jmvReadWrite::write_omv(data, \"Trial.omv\") unlink(\"Trial.omv\")"},{"path":"https://sjentsch.github.io/jmvReadWrite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Jentschke. Author, maintainer, copyright holder.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jentschke S (2024). jmvReadWrite: Read Write jamovi Files. R package version 0.4.8, https://CRAN.R-project.org/package=jmvReadWrite.","code":"@Manual{jmvReadWrite,   title = {jmvReadWrite: Read and Write jamovi Files},   author = {Sebastian Jentschke},   year = {2024},   note = {R package version 0.4.8},   url = {https://CRAN.R-project.org/package=jmvReadWrite}, }"},{"path":"https://sjentsch.github.io/jmvReadWrite/index.html","id":"jmvreadwrite-","dir":"","previous_headings":"","what":"Read and Write jamovi Files (.omv)","title":"Read and Write jamovi Files (.omv)","text":"R-package jmvReadWrite reads writes .omv-files used statistical spreadsheet jamovi (https://www.jamovi.org). supposed ease using jamovi R together, provide helper functions often required data management tasks, adjust use syntax statistical analyses created using GUI jamovi R (connection R-library jmv). recently, jmvReadWrite became easily available within jamovi becoming part Rj module (can use writing R commands, documented ), via jTransform module provides graphical user interface helper functions.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and Write jamovi Files (.omv)","text":"R, can either install stable version jmvReadWrite available CRAN using following command: can install development version jmvReadWrite package GitHub:","code":"install.packages(\"jmvReadWrite\") if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"sjentsch/jmvReadWrite\")"},{"path":"https://sjentsch.github.io/jmvReadWrite/index.html","id":"how-to-use-the-package","dir":"","previous_headings":"","what":"How to use the package?","title":"Read and Write jamovi Files (.omv)","text":"read_omv following code uses ToothGrowth-data set part data sets included R (current file contains modifications though testing reading writing routines: read_omv write_omv). data set, syntax conduct ANOVA run. results similar obtained running analysis jamovi (using GUI). , open file menu (☰) choose Open, Data Library ToothGrowth. Afterwards, click ANOVA-button Analyses-tab choose ANOVA. , assign variable len Dependent Variable supp dose Fixed Factors. Afterwards, choose / tick Overall Model Test ω². Open drop-menu Assumption Checks tick Homogeneity test Normality test. results identical apart table output looks nicer jamovi (text, ), numbers rounded maybe one two cosmetic differences. want copy syntax generated jamovi, switch Syntax Mode. Afterwards, syntax shown top analysis can copied . Since version 0.2.0, read_omv also extracts syntax analyses may conducted jamovi-GUI stored .omv-file. extract , set parameter getSyn = TRUE calling read_omv (default FALSE). parameter set, analyses stored attribute syntax. can used shown following examples:  write_omv jmvReadWrite-package also enables write .omv-files order use jamovi. Let’s assume large collection log-files (e.g., experiment) compile process (summarize, filter, etc.) R order later analyse jamovi. processed log-files stored data frame (called, e.g., data) write file can open jamovi afterwards. Although jamovi reads R-data files (.RData, .rda, .rds) write_omv permits store jamovi-specific attributes (variable labels) addition. Please note reading .omv-file order write back .omv-file (perhaps modifications), recommended leave sveAtt-attribute set TRUE (default). Trial.omv example kept, look like original file (plus possible modifications). , e.g., added new column, adjust attributes (e.g., enforce specific columnType measurementType): just look attributes stored columns. Helper functions jmvReadWrite contains number helper functions assist data management tasks frequently required: arrange_cols_omv: Re-arranges columns data file requested order. convert_to_omv: Converts data sets file formats jamovi-format. function may helpful convert larger amount files. describe_omv: Adds title description data set. function may helpful documenting contained data set, e.g. publishing repository OSF, generated data sets, e.g. used teaching. distances_omv: Calculates wide range distances measures (continuous, frequency binary data). can determined, whether calculation distances carried columns / variables rows / units observation. original data can standardized distances calculated. long2wide_omv: Converts data set long wide format: Time points repeated measurements arranged rows original converted columns. wide2long_omv: Converts data set wide long format: Time points repeated measurements arranged columns original converted rows. merge_cols_omv: Add variables several data sets, .e. variables / columns second, etc. input data set added columns first data set. merge_rows_omv: Add cases several data sets, .e. cases / rows second, etc. data set added rows first data set. sort_omv: Sort data set according one variable(s). transform_vars_omv: Transform skewed variables (aiming better conform normal distribution). transpose_omv: Transpose data set: Make rows columns vice versa. Changelog","code":"fleOMV <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleOMV) # if the \"jmv\"-package is installed, we can run a test analysis with the data if (\"jmv\" %in% rownames(installed.packages())) {     jmv::ANOVA(         formula = len ~ supp + dose + supp:dose,         data = data,         effectSize = c(\"omega\"),         modelTest = TRUE,         homo = TRUE,         norm = TRUE)     } #>  #>  ANOVA #>  #>  ANOVA - len                                                                                       #>  ────────────────────────────────────────────────────────────────────────────────────────────────  #>                     Sum of Squares    df    Mean Square    F            p             ω²           #>  ────────────────────────────────────────────────────────────────────────────────────────────────  #>    Overall model         2740.1033     5      548.02067    41.557178    < .0000001                 #>    supp                   205.3500     1      205.35000    15.571979     0.0002312    0.0554519    #>    dose                  2426.4343     2     1213.21717    91.999965    < .0000001    0.6925788    #>    supp:dose              108.3190     2       54.15950     4.106991     0.0218603    0.0236466    #>    Residuals              712.1060    54       13.18715                                            #>  ────────────────────────────────────────────────────────────────────────────────────────────────  #>  #>  #>  ASSUMPTION CHECKS #>  #>  Homogeneity of Variances Test (Levene's)  #>  ────────────────────────────────────────  #>    F           df1    df2    p            #>  ────────────────────────────────────────  #>    1.940130      5     54    0.1027298    #>  ────────────────────────────────────────  #>  #>  #>  Normality Test (Shapiro-Wilk)  #>  ─────────────────────────────  #>    Statistic    p            #>  ─────────────────────────────  #>    0.9849884    0.6694242    #>  ───────────────────────────── fleOMV <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleOMV, getSyn = TRUE) # shows the syntax of the analyses from the .omv-file # please note that syntax extraction may not work on all systems # if the syntax couldn't be extracted, an empty list (length = 0) is returned, # otherwise, the syntax of the analyses from the .omv-file is shown and # the commands of the first and the second analysis are run, with the # output of the second analysis assigned to the variable result if (length(attr(data, \"syntax\")) >= 2) {     attr(data, \"syntax\")     # if the \"jmv\"-package is installed, we can run the analyses in \"syntax\"     if (\"jmv\" %in% rownames(installed.packages())) {         eval(parse(text = attr(data, \"syntax\")[[1]]))         eval(parse(text = paste0(\"result = \", attr(data, \"syntax\")[[2]])))         names(result)         # -> \"main\"      \"assump\"    \"contrasts\" \"postHoc\"   \"emm\"         # (the names of the five output tables)     } } #> [1] \"main\"      \"assump\"    \"contrasts\" \"postHoc\"   \"emm\"       \"residsOV\" # use the data set \"ToothGrowth\" and, if it exists, write it as jamovi-file # using write_omv() data(\"ToothGrowth\", package = \"jmvReadWrite\") # \"retDbg\" has to be set in order to return debug information to wrtDta wrtDta <- jmvReadWrite::write_omv(ToothGrowth, \"Trial.omv\", retDbg = TRUE) names(wrtDta) #> [1] \"mtaDta\" \"xtdDta\" \"dtaFrm\" # -> \"mtaDta\" \"xtdDta\" \"dtaFrm\" # this debug information contains a list with the metadata (\"mtaDta\", e.g., # column and data type), the extended data (\"xtdDta\", e.g., variable lables), # and the data frame (dtaFrm) for checking (understanding the file format) and # debugging  # check whether the file was written to the disk, get the file information (size, etc.) # and delete the file afterwards list.files(\".\", \"Trial.omv\") #> [1] \"Trial.omv\" file.info(\"Trial.omv\") #>           size isdir mode               mtime               ctime #> Trial.omv 2617 FALSE  644 2024-11-09 20:46:54 2024-11-09 20:46:54 #>                         atime   uid  gid  uname grname #> Trial.omv 2024-11-09 20:46:54 87448 4601 sje025 ansatt unlink(\"Trial.omv\") # reading and writing a file with the \"sveAtt\"-parameter permits you to keep # essential meta-data to ensure that the written file looks and works like the # original file (plus you modifications) fleOMV <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleOMV, sveAtt = TRUE) # shows the names of the attributes for the whole data set (e.g., number of # rows and columns) and the names of the attributes of the first column names(attributes(data)) #> [1] \"names\"       \"row.names\"   \"class\"       \"fltLst\"      \"removedRows\" #> [6] \"addedRows\"   \"transforms\" names(attributes(data[[1]])) #>  [1] \"name\"           \"id\"             \"columnType\"     \"dataType\"       #>  [5] \"measureType\"    \"formula\"        \"formulaMessage\" \"parentId\"       #>  [9] \"width\"          \"type\"           \"importName\"     \"description\"    #> [13] \"transform\"      \"edits\"          \"missingValues\"  \"filterNo\"       #> [17] \"active\" # # perhaps do some modifications to the file here and write it back afterwards jmvReadWrite::write_omv(data, \"Trial.omv\") unlink(\"Trial.omv\")"},{"path":"https://sjentsch.github.io/jmvReadWrite/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Read and Write jamovi Files (.omv)","text":"Sebastian Jentschke","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Read and Write jamovi Files (.omv)","text":"AGPL 3","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/index.html","id":"giving-back","dir":"","previous_headings":"","what":"Giving back","title":"Read and Write jamovi Files (.omv)","text":"find package helpful, please consider donating jamovi project (via Patreon-link left side). can’t give money, like support us another way, may contribute translating jamovi, jamovi documentation, textbook ”learning statistics jamovi“ language. Thank support!","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/AlbumSales.html","id":null,"dir":"Reference","previous_headings":"","what":"Imagine that you worked for a record company and that your boss was interested in predicting album sales from advertising. — AlbumSales","title":"Imagine that you worked for a record company and that your boss was interested in predicting album sales from advertising. — AlbumSales","text":"data set fictional constructed Andy Field therefore owns copyright. data set also publicly available website accompanies Andy Field's book, https://edge.sagepub.com/field5e. Without Andy Field's explicit consent, data set may distributed commercial purposes, data set may edited, data set may presented without acknowledging source (.e., terms CC -NC-ND license).","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/AlbumSales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imagine that you worked for a record company and that your boss was interested in predicting album sales from advertising. — AlbumSales","text":"","code":"AlbumSales"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/AlbumSales.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Imagine that you worked for a record company and that your boss was interested in predicting album sales from advertising. — AlbumSales","text":"data frame 60 rows, one representing different album, 5 variables: selSbj Select data row (1) (0) Adverts Amount (thousands pounds) spent promoting album release Airplay many times songs album played prominent national radio station week release Image attractive people found band's image (10) Sales Sales (thousands) album week release","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/AlbumSales.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imagine that you worked for a record company and that your boss was interested in predicting album sales from advertising. — AlbumSales","text":"Reference: Field, . P. (2017). Discovering Statistics Using IBM SPSS Statistics (5th ed.). Sage.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/ToothGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"The Effect of Vitamin C on Tooth Growth in Guinea Pigs — ToothGrowth","title":"The Effect of Vitamin C on Tooth Growth in Guinea Pigs — ToothGrowth","text":"Effect Vitamin C Tooth Growth Guinea Pigs","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/ToothGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Effect of Vitamin C on Tooth Growth in Guinea Pigs — ToothGrowth","text":"","code":"ToothGrowth"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/ToothGrowth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The Effect of Vitamin C on Tooth Growth in Guinea Pigs — ToothGrowth","text":"data frame 60 rows 6 variables: ID ID guinea pig supp Supplement type (VC: Vitamin C OJ: Orange juice) supp2 Transformation supplement type (factor numerical: VC = 1; OJ = 2) dose Dose grams / day dose2 Dose grams / day len Tooth length logLen Natural logarithm tooth length (len)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/arrange_cols_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","title":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","text":"Re-arrange columns / variables .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/arrange_cols_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","text":"","code":"arrange_cols_omv(   dtaInp = NULL,   fleOut = \"\",   varOrd = c(),   varMve = list(),   psvAnl = FALSE,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/arrange_cols_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varOrd Character vector desired order variable(s) data frame (see Details; default: c()) varMve Named list defining much particular variable (name list entry) moved (neg. value list entry) (pos. value) data frame (see Details; default: c()) psvAnl Whether analyses contained input file shall transferred output file (default: FALSE) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/arrange_cols_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","text":"data frame (returned fleOut empty) order variables / columns input data set re-arranged","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/arrange_cols_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","text":"varOrd character vector. variables original data set contained varOrd, warning issued otherwise list variables defined varOrd used (removing variables contained varOrd). varMve named list. example list(VARNAME = -3) move variable VARNAME three positions list variables (towards first column), list(VARNAME = 3) move three positions (towards last column). number steps variable moved leads position either lower first higher total number variables data set, error message issued. Please note list entries processed one another, , second list entry, consider first list entry may changed order variables. Using varOrd makes sense changing position several variables, whereas using varMve makes sense one variable. parameters given, warning issued varOrd takes precedence. ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/arrange_cols_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-arrange columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — arrange_cols_omv","text":"","code":"if (FALSE) { # \\dontrun{ nmeInp <- system.file(\"extdata\", \"AlbumSales.omv\", package = \"jmvReadWrite\") nmeOut <- tempfile(fileext = \".omv\") # the original file has the variables in the order: \"Adverts\", \"Airplay\", \"Image\", \"Sales\" names(read_omv(nmeInp)) # first, we move the variable \"Sales\" to the first place using the varOrd-parameter jmvReadWrite::arrange_cols_omv(dtaInp = nmeInp, fleOut = nmeOut,   varOrd = c(\"Sales\", \"Adverts\", \"Airplay\", \"Image\")) names(jmvReadWrite::read_omv(nmeOut)) unlink(nmeOut) # now, we move the variable \"Sales\" to the first place using the varMve-parameter jmvReadWrite::arrange_cols_omv(dtaInp = nmeInp, fleOut = nmeOut, varMve = list(Sales = -3)) names(jmvReadWrite::read_omv(nmeOut)) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Twenty-five personality self-report items taken from the International Personality Item Pool — bfi_sample","title":"Twenty-five personality self-report items taken from the International Personality Item Pool — bfi_sample","text":"data set contains responses 250 participants filling twenty-five personality self-report items taken International Personality Item Pool (https://ipip.ori.org) part Synthetic Aperture Personality Assessment (SAPA) web-based personality assessment (https://sapa-project.org) project. 25 items organized five putative factors: Agreeableness (A1 A5), Conscientiousness (C1 C5), Extraversion (E1 E5), Neuroticism (N1 N5), Openness (N1 N5). items short phrases respondent answer indicating accurately statement describes typical behaviour attitude. Responses collected using 6-point scale: 1 - inaccurate, 2 - Moderately inaccurate, 3 - Slightly inaccurate, 4 - Slightly accurate, 5 - Moderately accurate, 6 - accurate.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twenty-five personality self-report items taken from the International Personality Item Pool — bfi_sample","text":"","code":"bfi_sample"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Twenty-five personality self-report items taken from the International Personality Item Pool — bfi_sample","text":"data frame 254 rows (250 original respondents, 4 generated testing) 33 variables: ID Respondent ID A1 indifferent feelings others. (reversed) A2 Inquire others' well-. A3 Know comfort others. A4 Love children. A5 Make people feel ease. C1 exacting work. C2 Continue everything perfect. C3 things according plan. C4 things half-way manner. (reversed) C5 Waste time. (reversed) E1 talk lot. (reversed) E2 Find difficult approach others. (reversed) E3 Know captivate people. E4 Make friends easily. E5 Take charge. N1 Get angry easily. N2 Get irritated easily. N3 frequent mood swings. N4 Often feel blue. N5 Panic easily. O1 full ideas. O2 Avoid difficult reading material. (reversed) O3 Carry conversation higher level. O4 Spend time reflecting things. O5 probe deeply subject. (reversed) gender Gender respondent (female, male) age Age respondent (years) AD Exponent age (computed: EXP(age)) AF Random data (testing) AG Random data (testing) age_tr Age respondent (transformed, decades: 1 - 10-19, 2 - 20-29, 3 - 30-39, 4 - 40-49, 5 - 50-59, 6 - 60 ) ID2 Respondent ID (testing; \"\" + random-generated 5-digit-code)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample2.html","id":null,"dir":"Reference","previous_headings":"","what":"Twenty-five personality self-report items taken from the International Personality Item Pool (includes jamovi-attributes; should result in a file identical to bfi_sample2.omv under ","title":"Twenty-five personality self-report items taken from the International Personality Item Pool (includes jamovi-attributes; should result in a file identical to bfi_sample2.omv under ","text":"data set contains responses 250 participants filling twenty-five personality self-report items taken International Personality Item Pool (https://ipip.ori.org) part Synthetic Aperture Personality Assessment (SAPA) web-based personality assessment (https://sapa-project.org) project. 25 items organized five putative factors: Agreeableness (A1 A5), Conscientiousness (C1 C5), Extraversion (E1 E5), Neuroticism (N1 N5), Openness (N1 N5). items short phrases respondent answer indicating accurately statement describes typical behaviour attitude. Responses collected using 6-point scale: 1 - inaccurate, 2 - Moderately inaccurate, 3 - Slightly inaccurate, 4 - Slightly accurate, 5 - Moderately accurate, 6 - accurate. data set includes jamovi-attributes. supposed result identical file compared bfi_sample2.omv-file contained extdata-directory package written write_omv.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twenty-five personality self-report items taken from the International Personality Item Pool (includes jamovi-attributes; should result in a file identical to bfi_sample2.omv under ","text":"","code":"bfi_sample2"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Twenty-five personality self-report items taken from the International Personality Item Pool (includes jamovi-attributes; should result in a file identical to bfi_sample2.omv under ","text":"data.frame 250 rows 29 variables ID Respondent ID A1 indifferent feelings others. (reversed) A2 Inquire others' well-. A3 Know comfort others. A4 Love children. A5 Make people feel ease. C1 exacting work. C2 Continue everything perfect. C3 things according plan. C4 things half-way manner. (reversed) C5 Waste time. (reversed) E1 talk lot. (reversed) E2 Find difficult approach others. (reversed) E3 Know captivate people. E4 Make friends easily. E5 Take charge. N1 Get angry easily. N2 Get irritated easily. N3 frequent mood swings. N4 Often feel blue. N5 Panic easily. O1 full ideas. O2 Avoid difficult reading material. (reversed) O3 Carry conversation higher level. O4 Spend time reflecting things. O5 probe deeply subject. (reversed) gender Gender respondent (female, male) age Age respondent (years) ID2 Respondent ID (testing; \"\" + random-generated 4-digit-code)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample3.html","id":null,"dir":"Reference","previous_headings":"","what":"Twenty-five personality self-report items taken from the International Personality Item Pool (testing file for ordered factors / ","title":"Twenty-five personality self-report items taken from the International Personality Item Pool (testing file for ordered factors / ","text":"data set contains responses 250 participants filling twenty-five personality self-report items taken International Personality Item Pool (https://ipip.ori.org) part Synthetic Aperture Personality Assessment (SAPA) web-based personality assessment (https://sapa-project.org) project. 25 items organized five putative factors: Agreeableness (A1 A5), Conscientiousness (C1 C5), Extraversion (E1 E5), Neuroticism (N1 N5), Openness (N1 N5). items short phrases respondent answer indicating accurately statement describes typical behaviour attitude. Responses collected using 6-point scale: 1 - inaccurate, 2 - Moderately inaccurate, 3 - Slightly inaccurate, 4 - Slightly accurate, 5 - Moderately accurate, 6 - accurate. data set includes jamovi-attributes. supposed result identical file compared bfi_sample2.omv-file contained extdata-directory package written write_omv.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twenty-five personality self-report items taken from the International Personality Item Pool (testing file for ordered factors / ","text":"","code":"bfi_sample3"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/bfi_sample3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Twenty-five personality self-report items taken from the International Personality Item Pool (testing file for ordered factors / ","text":"data.frame 250 rows 28 variables ID Respondent ID A1 indifferent feelings others. (reversed) A2 Inquire others' well-. A3 Know comfort others. A4 Love children. A5 Make people feel ease. C1 exacting work. C2 Continue everything perfect. C3 things according plan. C4 things half-way manner. (reversed) C5 Waste time. (reversed) E1 talk lot. (reversed) E2 Find difficult approach others. (reversed) E3 Know captivate people. E4 Make friends easily. E5 Take charge. N1 Get angry easily. N2 Get irritated easily. N3 frequent mood swings. N4 Often feel blue. N5 Panic easily. O1 full ideas. O2 Avoid difficult reading material. (reversed) O3 Carry conversation higher level. O4 Spend time reflecting things. O5 probe deeply subject. (reversed) gender Gender respondent (Females, Males) age Age respondent (years)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/convert_to_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","title":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","text":"Convert data files (CSV, R, statistics packages) .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/convert_to_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","text":"","code":"convert_to_omv(   fleInp = \"\",   fleOut = \"\",   varSrt = c(),   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/convert_to_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","text":"fleInp Name (including path, required) data file read (\"FILENAME.ext\"; default: \"\"); supports CSV R-files natively, file types \"foreign\" \"haven\" installed, see Details fleOut Name (including path, required) data file written (\"FILENAME.omv\"; default: \"\"); empty, extension fleInp replaced \".omv\" varSrt Variable(s) used sort data frame (see Details; empty, row order input file kept; default: c()) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/convert_to_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","text":"function return value (returns NULL)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/convert_to_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","text":"difference remaining helper functions, convert_to_omv accept data frame input neither return data frame fleOut left empty: want write data frame, use write_omv. want data frame returned use read_omv jamovi-files functions listed bullet point file type. varSrt can either character character vector (one variables respectively). sorting order particular variable can inverted preceding variable name \"-\". Please note make sense hence throws warning certain variable types (e.g., factors). ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/convert_to_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data files (CSV, R, other statistics packages) into .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — convert_to_omv","text":"","code":"if (FALSE) { # \\dontrun{ # Example 1: Convert from RDS # (use ToothGrowth as example, save it as RDS) nmeInp <- tempfile(fileext = \".rds\") nmeOut <- tempfile(fileext = \".omv\") saveRDS(jmvReadWrite::ToothGrowth, nmeInp) jmvReadWrite::convert_to_omv(fleInp = nmeInp, fleOut = nmeOut) cat(list.files(dirname(nmeOut), basename(nmeOut))) # -> \"file[...].omv\" ([...] contains a random combination of numbers / characters cat(file.info(nmeOut)$size) # -> 2448 (size may differ on different OSes) cat(str(jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE))) # gives a overview of the dataframe (all columns and some attributes, # sveAtt is intentionally set to FALSE to make the output not too overwhelming) unlink(nmeInp) unlink(nmeOut)  # Example 2: Convert from CSV # (use ToothGrowth again as example, this time save it as CSV) nmeInp <- tempfile(fileext = \".csv\") nmeOut <- tempfile(fileext = \".omv\") write.csv(jmvReadWrite::ToothGrowth, nmeInp) jmvReadWrite::convert_to_omv(fleInp = nmeInp, fleOut = nmeOut) cat(list.files(dirname(nmeOut), basename(nmeOut))) cat(file.info(nmeOut)$size) # -> 2104 (size may differ acc. to OS; the size is smaller than for the RDS-file # because CSV can store fewer attributes, e.g., labels) cat(str(jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE))) # gives a overview of the dataframe (all columns and some attributes) unlink(nmeInp) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/describe_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","title":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","text":"Adds title description data set stored .omv-file statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/describe_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","text":"","code":"describe_omv(   dtaInp = NULL,   fleOut = \"\",   dtaTtl = c(),   dtaDsc = c(),   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/describe_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead dtaTtl Character vector title added data set (see Details; default: \"\") dtaDsc Description data set, either character vector (HTML-formatted) named list entries \"description\", \"variables\", \"references\", \"license\" (see Details; default: \"\") usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/describe_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","text":"data frame (returned fleOut empty) order variables / columns input data set re-arranged","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/describe_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","text":"aim function add title data set description jamovi data files. Two typical use cases (1) help creating data sets used teaching (.e., either creating using data sets R, afterwards adding description ), (2) provide ”properly described“ data publishing repository OSF). NB: data set contain existing analyses. overwritten ( warning issued informing ). dtaTtl title dataset (top results output, .e., title initially “Results” create new data set jamovi). dtaDsc can either character vector (length = 1) containing HTML-formatted text describes data set (see chrDsc examples HTML tags currently implemented; putting “unformatted” text problem, result just plain text without formatting). Alternatively, dtaDcs can named list entries description, variables, references, license. entries except variables contain character vectors (length = 1); variables shall named list variable name name description variable contains entry. description variables must given, references license can left blank (\"\"; names must present list). example named list description (lstDsc), well character vector HTML tags implemented (chrDsc) can found examples . ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/describe_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a title and a description for a data set stored as .omv-file for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — describe_omv","text":"","code":"if (FALSE) { # \\dontrun{ dtaFrm <- jmvReadWrite::ToothGrowth[, c(\"len\", \"supp\", \"dose\")] nmeOut <- tempfile(fileext = \".omv\")  # the paste's underneath are only for readability (without them, the vignettes are misformatted) lstDsc <- list(description = paste(\"The response is the length of odontoblasts (cells responsible\",                                    \"for tooth growth) in 60 guinea pigs. Each animal received one\",                                    \"of three dose levels of vitamin C (0.5, 1, and 2 mg / day) by\",                                    \"one of two delivery methods, orange juice or ascorbic acid (a\",                                    \"form of vitamin C and coded as VC).\"),                variables = list(len  = \"Tooth length\",                                 supp = \"Supplement type (VC or OJ)\",                                 dose = \"Dose (in milligrams / day\"),                references = paste(\"Crampton, E. W. (1947). The growth of the odontoblast of the\",                                   \"incisor teeth as a criterion of vitamin C intake of the guinea\",                                   \"pig. <em>The Journal of Nutrition, 33<\/em>(5), 491-504.\",                                   \"https://doi.org/10.1093/jn/33.5.491\"),                license = \"\") jmvReadWrite::describe_omv(dtaInp = dtaFrm, fleOut = nmeOut, dtaTtl = \"ToothGrowth\",   dtaDsc = lstDsc) # don't include the unlink, if you copy the code and want to look at the resulting output file unlink(nmeOut)  # the code underneath should cover all formatting options jamovi is able to use (paste0 is only # for readability) chrDsc <- paste0(\"<p><strong>Trial – all formattings:<\/strong><br/><strong>bold<\/strong><br/>\",                  \"<strong><em>bold, italics<\/em><\/strong><br/><em>italics<\/em><br/><u>underlined\",                  \"<\/u><br/>link:<a href=\\\"https://jamovi.org﻿﻿﻿\\\" target=\\\"_blank\\\">https://\",                  \"jamovi.org﻿﻿﻿<\/a><br/><s>strikethrough<\/s><br/>C<sub>2<\/sub>H<sub>5<\/sub>\",                  \"OH<br/>R<sup>2<\/sup><br/><span style=\\\"background-color:#e60000\\\">background \",                  \"colour: red<\/span><br/><span style=\\\"color:#e60000\\\">foreground color: red\",                  \"<\/span><\/p><p class=\\\"ql-align-center\\\">centered<\/p><p class=\\\"ql-align-right\\\">\",                  \"right<\/p><p class=\\\"ql-align-justify\\\">justify justify justify justify justify \",                  \"justify justify justify justify justify justify justify justify justify justify \",                  \"justify justify justify justify justify justify justify justify justify justify\",                  \"<\/p><p><br/><\/p><ol><li>numbered list<\/li><li>numbered list<\/li><\/ol><p><br/>\",                  \"<\/p><ul><li>bullet point<\/li><li>bullet point<\/li><\/ul><p class=\\\"ql-indent-1\\\">\",                  \"indented once<\/p><p class=\\\"ql-indent-2\\\">indented twice<\/p><p \",                  \"class=\\\"ql-indent-1\\\">indented once<\/p><p>Formula: <span class=\\\"ql-formula\\\">\",                  \"e=mc^2<\/span><\/p><pre>Preformatted<\/pre><p>normal again<\/p><h2>Heading<\/h2>\") jmvReadWrite::describe_omv(dtaInp = dtaFrm, fleOut = nmeOut, dtaTtl = \"ToothGrowth\",   dtaDsc = chrDsc) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/distances_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","title":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","text":"Calculates distances (returning symmetric matrix) raw data matrix .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/distances_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","text":"","code":"distances_omv(   dtaInp = NULL,   fleOut = \"\",   varDst = c(),   clmDst = TRUE,   stdDst = \"none\",   nmeDst = \"euclid\",   mtxSps = FALSE,   mtxTrL = FALSE,   mtxDgn = TRUE,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/distances_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details . fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead. varDst Variable (default: c()) containing character vector names variables distances calculated. See Details information. clmDst Whether distances shall calculated columns (TRUE) rows (FALSE; default: TRUE). See Details information. stdDst Character string indicating whether variables varDst standardized (default: \"none\"). See Details information. nmeDst Character string indicating distance measure calculated calculated (default: \"euclidean\"). See Details information. mtxSps Whether symmetric matrix returned sparse (default: FALSE) mtxTrL Whether symmetric matrix returned contain lower triangular (default: FALSE) mtxDgn Whether symmetric matrix returned retain values main diagonal (default: TRUE) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata, SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive. selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details .","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/distances_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","text":"data frame containing symmetric matrix (returned fleOut empty) containing distances variables / columns (clmDst == TRUE) rows (clmDst == FALSE)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/distances_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","text":"varDst must character vector containing variables calculated distances . clmDst set TRUE, distances calculated possible variable pairs subjects / rows original data frame. clmDst set FALSE, distances calculated participants variables given varDst. clmDst set TRUE, symmetric matrix returned size V x V (V number variables varDst; mtxSps set TRUE, size V - 1 x V - 1, see ); clmDst set FALSE, symmetric matrix returned size R x R (R number rows original dataset; mtxSps set TRUE, size R - 1 x R - 1, see ). stdDst can one following calculations standardize selected variables calculating distances: none (standardize; default), z (z scores), sd (divide std. dev.), range (divide range), max (divide absolute maximum), mean (divide mean), rescale (subtract mean divide range). nmeDst can one following distance measures. (1) interval data: euclid (Euclidean), seuclid (squared Euclidean), block (city block / Manhattan), canberra (Canberra). chebychev (maximum distance / supremum norm / Chebychev), minkowski_p (Minkowski power p; NB: needs p), power_p_r (Minkowski power p, r-th root; NB: needs p r), cosine (cosine two vectors), correlation (correlation two vectors). (2) frequency count data: chisq (chi-square dissimilarity two sets frequencies), ph2 (chi-square dissimilarity normalized square root number values used calculation). (3) binary data, measure optional parts p np indicate presence (p; defaults 1 given) absence (np; defaults zero given). () matching coefficients: rr_p_np (Russell Rao), sm_p_np (simple matching), jaccard_p_np / jaccards_p_np (Jaccard similarity; SPSS), jaccardd_p_np (Jaccard dissimiliarity; dist(..., \"binary\") R), dice_p_np (Dice Czekanowski Sorenson similarity), ss1_p_np (Sokal Sneath measure 1), rt_p_np (Rogers Tanimoto), ss2_p_np (Sokal Sneath measure 2), k1_p_np (Kulczynski measure 1), ss3_p_np (Sokal Sneath measure 3). (b) conditional probabilities: k2_p_np (Kulczynski measure 2), ss4_p_np (Sokal Sneath measure 4), hamann_p_np (Hamann). (c) predictability measures: lambda_p_np (Goodman Kruskal Lambda), d_p_np (Anderberg’s D), y_p_np (Yule’s Y coefficient colligation), q_p_np (Yule’s Q). (d) measures: ochiai_p_np (Ochiai), ss5_p_np (Sokal Sneath measure 5), phi_p_np (fourfold point correlation), beuclid_p_np (binary Euclidean distance), bseuclid_p_np (binary squared Euclidean distance), size_p_np (size difference), pattern_p_np (pattern difference), bshape_p_np (binary Shape difference), disper_p_np (dispersion similarity), variance_p_np (variance dissimilarity), blwmn_p_np (binary Lance Williams non-metric dissimilarity). (4) none (carry standardization, stdDst different none). mtxSps set, sparse matrix returned. matrices similar format one often finds correlation matrices. values retained lower triangular, columns range first variable second last varDst (respectively, columns contain first second last row original dataset clmDst set FALSE), rows contain second last variable varDst (respectively, rows contain second last row original dataset clmDst set FALSE). default, full symmetric matrix returned (.e., matrix NAs cell). behaviour can changed setting mtxTrL mtxDgn: mtxTrL set TRUE, values upper triangular matrix removed / replaced NAs; mtxDgn set FALSE, values main diagonal removed / replaced NAs. ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/distances_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates distances (returning a symmetric matrix) from a raw data matrix in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — distances_omv","text":"","code":"if (FALSE) { # \\dontrun{ # create matrices for the different types of distance measures: continuous # (cntFrm), frequency counts (frqFrm) or binary (binFrm); all 20 R x 5 C set.seed(1) cntFrm <- stats::setNames(as.data.frame(matrix(rnorm(100, sd = 10),             ncol = 5)), sprintf(\"C_%02d\", seq(5))) frqFrm <- stats::setNames(as.data.frame(matrix(sample(seq(10), 100,             replace = TRUE), ncol = 5)), sprintf(\"F_%02d\", seq(5))) binFrm <- stats::setNames(as.data.frame(matrix(sample(c(TRUE, FALSE), 100,             replace = TRUE), ncol = 5)), sprintf(\"B_%02d\", seq(5))) nmeOut <- tempfile(fileext = \".omv\")  # calculates the distances between columns, nmeDst is not required: \"euclid\" # is the default jmvReadWrite::distances_omv(dtaInp = cntFrm, fleOut = nmeOut, varDst =   names(cntFrm), nmeDst = \"euclid\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) # the resulting matrix (10 x 10) with the Euclidian distances print(dtaFrm)  # calculates the (Euclidean) distances between rows (clmDst = FALSE) jmvReadWrite::distances_omv(dtaInp = cntFrm, fleOut = nmeOut, varDst =   names(cntFrm), clmDst = FALSE, nmeDst = \"euclid\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) # the resulting matrix (20 x 20) with the Euclidian distances print(dtaFrm)  # calculates the (Euclidean) distances between columns; the original data # are z-standardized before calculating the distances (stdDst = \"z\") jmvReadWrite::distances_omv(dtaInp = cntFrm, fleOut = nmeOut, varDst =   names(cntFrm), stdDst = \"z\", nmeDst = \"euclid\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) # the resulting matrix (10 x 10) with the Euclidian distances using the # z-standardized data print(dtaFrm)  # calculates the correlations between columns jmvReadWrite::distances_omv(dtaInp = cntFrm, fleOut = nmeOut, varDst =   names(cntFrm), nmeDst = \"correlation\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) # the resulting matrix (10 x 10) with the correlations print(dtaFrm)  # calculates the chi-square dissimilarity (nmeDst = \"chisq\") between columns jmvReadWrite::distances_omv(dtaInp = frqFrm, fleOut = nmeOut, varDst =   names(frqFrm), nmeDst = \"chisq\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) # the resulting matrix (10 x 10) with the chi-square dissimilarities print(dtaFrm)  # calculates the Jaccard similarity (nmeDst = \"jaccard\") between columns jmvReadWrite::distances_omv(dtaInp = binFrm, fleOut = nmeOut, varDst =   names(binFrm), nmeDst = \"jaccard\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) # the resulting matrix (10 x 10) with the Jaccard similarities print(dtaFrm)  } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/label_vars_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","title":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","text":"Label columns / variables .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/label_vars_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","text":"","code":"label_vars_omv(   dtaInp = NULL,   fleOut = \"\",   varLbl = NULL,   psvAnl = FALSE,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/label_vars_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varLbl Variable (default: NULL) containing either character (file name; file must contain two columns one variable names, labels), data frame (one column variable names, labels), character vector (length data set, containing variable labels). See Details information. psvAnl Whether analyses contained input file shall transferred output file (default: FALSE) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/label_vars_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","text":"data frame (returned fleOut empty) order variables / columns input data set re-arranged","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/label_vars_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","text":"varLbl can either (1) character file name read (file must contain columns, one variable names, variable labels); (2) data frame two columns (one variable names, variable labels), (3) character vector containing variable labels (length equal number variables input data set). ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/label_vars_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label columns / variables in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — label_vars_omv","text":"","code":"if (FALSE) { # \\dontrun{ # use one of the data files included in the package, but only the first 28 columns # (the latter columns contain data for testing calculations, etc.) nmeInp <- system.file(\"extdata\", \"bfi_sample.omv\", package = \"jmvReadWrite\") dtaInp <- jmvReadWrite::read_omv(nmeInp)[1:28] nmeOut <- tempfile(fileext = \".omv\") # in the original file, the variable labels – attr(*, \"jmv-desc\") - are empty lapply(dtaInp, attr, \"jmv-desc\") # the definition of the variable labels can be read from a file with two columns, # the first containing the variable name, the second the variable labels # you can easily create such a file in Excel and save it as CSV # if your CSV contains column names (e.g., varNme and varLbl) in the first row are they ignored lblFle <- system.file(\"extdata\", \"label_example.csv\", package = \"jmvReadWrite\") lblDtF <- utils::read.csv(lblFle, header = FALSE) str(lblDtF)  # there are three options to give the varLbl parameter: # (1) as file name, ... jmvReadWrite::label_vars_omv(dtaInp = dtaInp, fleOut = nmeOut, varLbl = lblFle) lapply(jmvReadWrite::read_omv(nmeOut), attr, \"jmv-desc\") unlink(nmeOut)  # (2) as data frame (using lblDtF from above), or ... jmvReadWrite::label_vars_omv(dtaInp = dtaInp, fleOut = nmeOut, varLbl = lblDtF) lapply(jmvReadWrite::read_omv(nmeOut), attr, \"jmv-desc\") unlink(nmeOut)  # (3) as character vector (with the same length as there are columns in the input data set) lblChr <- lblDtF[[2]] head(lblChr) jmvReadWrite::label_vars_omv(dtaInp = dtaInp, fleOut = nmeOut, varLbl = lblChr) lapply(jmvReadWrite::read_omv(nmeOut), attr, \"jmv-desc\") unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/long2wide_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","text":"Converts .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org) long wide format","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/long2wide_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","text":"","code":"long2wide_omv(   dtaInp = NULL,   fleOut = \"\",   varTgt = c(),   varExc = c(),   varID = \"ID\",   varTme = c(),   varSep = \"_\",   varOrd = c(\"times\", \"vars\"),   varAgg = c(\"mean\", \"first\"),   varSrt = c(),   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/long2wide_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varTgt Names one variables transformed / reshaped (variables excluded, empty(c()) variables except varTme, varID varExc included; default: c()) varExc Name variable(s) excluded transformation, typically -subject-variable(s) (default: c()) varID Names one variables identify group / individual (default: c()) varTme Name variable(s) differentiates multiple records group / individual (default: c()) varSep Separator character concatenating fixed time-varying part variable name (\"VAR1_1\", \"VAR1_2\"; default: \"_\") varOrd variables / columns organized: \"times\" (default) steps time varying variable adjacent, \"vars\" steps original columns long dataset varAgg multiple occurrences particular combinations time varying variables aggregated: either \"mean\" (calculate mean occurrences), \"first\" (take first occurrence) varSrt Variable(s) used sort data frame (see Details; empty, order returned reshape kept; default: c()) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/long2wide_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","text":"data frame (returned fleOut empty) input data set converted long wide format","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/long2wide_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","text":"varTgt empty, tried generate using variables data frame except defined varID, varTme varExc. variable(s) varID need unique identifiers (original dataset), varExc requirement. generally recommended variable names varExc varID contain variable separator (defined varSep; default: \"_\"). varSrt can either character character vector (one variables respectively). sorting order particular variable can inverted preceding variable name \"-\". Please note make sense hence throws warning certain variable types (e.g., factors). ellipsis-parameter (...) can used submit arguments / parameters functions used transforming, reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. transformation long wide uses reshape. varTgt matches (~) v.names reshape, varID ~ idvar, varTme ~ timevar, varSep ~ sep. help reshape explanatory, click link “See also” access , particularly explained “Details”. functions reading writing data : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/long2wide_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from long to wide format — long2wide_omv","text":"","code":"if (FALSE) { # \\dontrun{ # generate a test dataframe with 100 (imaginary) participants / units of #  observation (ID), 8 measurement (measure) of one variable (X) dtaInp <- data.frame(ID = rep(as.character(seq(1, 100)), each = 8),                      measure = rep(seq(1, 8), times = 100),                      X = runif(800, -10, 10)) cat(str(dtaInp)) # the output should look like this # 'data.frame': 800 obs. of  3 variables: #  $ ID     : chr  \"1\" \"1\" \"1\" \"1\" ... #  $ measure: int  1 2 3 4 5 6 7 8 1 2 ... #  $ X      : num  ... # this data set is stored as (temporary) RDS-file and later processed by long2wide nmeInp <- tempfile(fileext = \".rds\") nmeOut <- tempfile(fileext = \".omv\") saveRDS(dtaInp, nmeInp) jmvReadWrite::long2wide_omv(dtaInp = nmeInp, fleOut = nmeOut, varTgt = \"X\", varID = \"ID\",   varTme = \"measure\") # it is required to give at least the arguments dtaInp, varID and varTme # check whether the file was created and its size cat(list.files(dirname(nmeOut), basename(nmeOut))) # -> \"file[...].omv\" ([...] contains a random combination of numbers / characters cat(file.info(nmeOut)$size) # -> 6851 (approximate size; size may differ in every run [in dependence of #          how well the generated random data can be compressed]) cat(str(jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE))) # the data set is now transformed into wide (and each the measurements is now # indicated as a suffix to X; X_1, X_2, ...) # 'data.frame':  100 obs. of  9 variables: #  $ ID : chr  \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" ... #   ..- attr(*, \"jmv-id\")= logi TRUE #   ..- attr(*, \"missingValues\")= list() #  $ X_1: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_2: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_3: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_4: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_5: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_6: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_7: num  ... #   ..- attr(*, \"missingValues\")= list() #  $ X_8: num  ... #   ..- attr(*, \"missingValues\")= list()  unlink(nmeInp) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_cols_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","title":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","text":"Merges two data files adding content input files columns first input file outputs files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_cols_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","text":"","code":"merge_cols_omv(   dtaInp = NULL,   fleOut = \"\",   typMrg = c(\"outer\", \"inner\", \"left\", \"right\"),   varBy = list(),   varSrt = c(),   psvAnl = FALSE,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_cols_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","text":"dtaInp Either data frame (attribute \"fleInp\" containing files merge) vector names input files (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead typMrg Type merging operation: \"outer\" (default), \"inner\", \"left\" \"right\"; see Details varBy Name variable data sets matched, can either string, character list (see Details ; default: list()) varSrt Variable(s) used sort data frame (see Details; empty, order merging kept; default: c()) psvAnl Whether analyses contained input file shall transferred output file (TRUE / FALSE; default: FALSE) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_cols_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","text":"data frame (returned fleOut empty) columns input data sets (given dtaInp-argument) concatenated","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_cols_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","text":"Using data frames input parameter dtaInp primarily thought used calling merge_cols_omv jamovi-modules jTransform Rj. use R, strongly recommended use character vector file names instead. four different types merging operations (defined via typMrg): \"outer\" keeps cases (columns resulting data set may contain empty cells / missing values input data sets row containing matching variable (defined varBy). \"inner\" keeps cases datasets contain value matching variable, \"left\" cases first data set dtaInp kept (whereas cases contained second later input data set dropped), \"right\" cases second (higher) data set dtaInp kept. behaviour \"left\" \"right\" may somewhat difficult predict case merging several data sets, therefore \"outer\" might safer choice several data sets merged. variable used matching (varBy) can either string (datasets contain matching variable name), character vector (containing one matching variables contained / data sets) list length dtaInp. list, cell can contain either string (one matching variable data set dtaInp) character vector (several matching variables data set dtaInp; NB: character vectors cells list must length necessary always use number matching variables merging). varSrt can either character character vector (one variables respectively). sorting order particular variable can inverted preceding variable name \"-\". Please note make sense hence throws warning certain variable types (e.g., factors). ellipsis-parameter (...) can used submit arguments / parameters functions used transforming reading data. clicking respective function “See also”, can get detailed overview parameters functions take. Adding columns uses merge. typMrg implemented setting TRUE FALSE .x .y merge, varBy matches .x .y. help merge can accessed clicking link “See also”. functions reading writing data : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_cols_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merges two or more data files by adding the content of other input files as columns to the first input file and outputs them as files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — merge_cols_omv","text":"","code":"if (FALSE) { # \\dontrun{ dtaInp <- jmvReadWrite::bfi_sample2 nmeInp <- paste0(tempfile(), \"_\", 1:3, \".rds\") nmeOut <- tempfile(fileext = \".omv\") for (i in seq_along(nmeInp)) {     saveRDS(stats::setNames(dtaInp, c(\"ID\", paste0(names(dtaInp)[-1], \"_\", i))), nmeInp[i]) } # save dtaInp three times (i.e., the length of nmeInp), adding \"_\" + 1 ... 3 as index # to the data variables (A1 ... O5, gender, age → A1_1, ...) jmvReadWrite::merge_cols_omv(dtaInp = nmeInp, fleOut = nmeOut, varBy = \"ID\") cat(file.info(nmeOut)$size) # -> 17731 (size may differ on different OSes) dtaOut <- jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE) # read the data set where the three original datasets were added as columns and show # the variable names cat(names(dtaOut)) cat(names(dtaInp)) # compared to the input data set, we have the same names (expect for \"ID\" which was # used for matching and that each variable had added an indicator from which data # set they came) cat(dim(dtaInp), dim(dtaOut)) # the first dimension of the data sets (rows) stayed the same (250), whereas the # second dimension is now approx. three times as large (28 -> 82): # 28 - 1 (for \"ID\") = 27 * 3 + 1 (for \"ID\") = 82 cat(colMeans(dtaInp[2:11])) cat(colMeans(dtaOut[2:11])) # it's therefore not much surprise that the values of the column means for the first # 10 variables of dtaInp and dtaOut are the same too  unlink(nmeInp) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_rows_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","title":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","text":"Merges two .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org) adding content second, etc.  file(s) rows first file","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_rows_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","text":"","code":"merge_rows_omv(   dtaInp = NULL,   fleOut = \"\",   typMrg = c(\"all\", \"common\"),   colInd = FALSE,   rstRwN = TRUE,   rmvDpl = FALSE,   varSrt = c(),   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_rows_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","text":"dtaInp Either data frame (attribute \"fleInp\" containing files merge) vector names input files (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead typMrg Type merging operation: \"\" (default)  \"common\"; see also Details colInd Add column indicator (basename file minus extension) marking input data set respective rows coming (default: FALSE) rstRwN Reset row names (.e., keep row names original input data sets number consecutively - one row number input data sets added ; default: TRUE) rmvDpl Remove duplicated rows (.e., rows content previous row columns; default: FALSE) varSrt Variable(s) used sort data frame (see Details; empty, order merging kept; default: c()) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_rows_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","text":"data frame (returned fleOut empty) rows input data sets (given dtaInp-argument) concatenated","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_rows_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","text":"Using data frames input parameter dtaInp primarily thought used calling merge_cols_omv jamovi-modules jTransform Rj. use R, strongly recommended use character vector file names instead. four different types merging operations (defined via typMrg): \"\" keeps existing variables / columns contained input data sets fills NA variable / column exist input data set. \"common\" keeps variables / columns common input data sets (.e., contained data sets). varSrt can either character character vector (one variables respectively). sorting order particular variable can inverted preceding variable name \"-\". Please note make sense hence throws warning certain variable types (e.g., factors). ellipsis-parameter (...) can used submit arguments / parameters functions used merging reading data. clicking respective function “See also”, can get detailed overview parameters functions take. Adding columns uses rbind (operation, adding missing columns (filled NAs), typMrg \"\"). functions reading writing data : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/merge_rows_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merges two .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) by adding the content of the second, etc. file(s) as rows to the first file — merge_rows_omv","text":"","code":"if (FALSE) { # \\dontrun{ dtaInp <- jmvReadWrite::bfi_sample2 nmeInp <- paste0(tempfile(), \"_\", 1:3, \".rds\") nmeOut <- tempfile(fileext = \".omv\") for (i in seq_along(nmeInp)) saveRDS(dtaInp[-i - 1], nmeInp[i]) # save dtaInp three times (i.e., the length of nmeInp), removing one data columns in # each data set (for demonstration purposes, A1 in the first, A2 in the second, ...) jmvReadWrite::merge_rows_omv(dtaInp = nmeInp, fleOut = nmeOut, colInd = TRUE) cat(file.info(nmeOut)$size) # -> 10767 (size may differ on different OSes) dtaOut <- jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE) unlink(nmeOut) # read the data set where the three original datasets were added as rows and show # the variable names cat(names(dtaInp)) cat(names(dtaOut)) # compared to the input data set, we have the same variable names; fleInd (switched # on by colInd = TRUE and showing from which data set the rows are coming from) is # new and A1 is moved to the end of the list (the \"original\" order of variables may # not always be preserved and columns missing from at least one of the input data # sets may be added at the end) cat(dim(dtaInp), dim(dtaOut)) # the first dimension of the data sets (rows) is now three times of that of the input # data set (250 -> 750), the second dimension (columns / variables) is increased by 1 # (for \"fleInd\")  jmvReadWrite::merge_rows_omv(dtaInp = nmeInp, fleOut = nmeOut, typMrg = \"common\") # the argument typMrg = \"common\" removes the columns that are not present in all of # the input data sets (i.e., A1, A2, A3) dtaOut <- jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE) unlink(nmeOut) # read the data set where the three original datasets were added as rows and show # the variable names cat(names(dtaInp)) cat(names(dtaOut)) # compared to the input data set, the variables that were missing in at least one # data set (i.e., \"A1\", \"A2\" and \"A3\") are removed cat(dim(dtaInp), dim(dtaOut)) # the first dimension of the data sets (rows) is now three times of that of the # input data set (250 -> 750), the second dimension (columns / variables) is # reduced by 3 (i.e., \"A1\", \"A2\", \"A3\")  unlink(nmeInp) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/read_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files created of the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — read_omv","title":"Read files created of the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — read_omv","text":"Read files created statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/read_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files created of the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — read_omv","text":"","code":"read_omv(   fleInp = \"\",   useFlt = FALSE,   rmMsVl = FALSE,   sveAtt = TRUE,   getSyn = FALSE,   getHTM = FALSE )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/read_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files created of the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — read_omv","text":"fleInp Name (including path, required) 'jamovi'-file read (\"FILENAME.omv\"; default: \"\") useFlt Apply filters (remove lines filter set 0; default: FALSE)? rmMsVl Remove values defined missing values (replace NA; default: FALSE)? sveAtt Store attributes required data set (want write data set using write_omv; default: FALSE)? getSyn Extract syntax analyses 'jamovi'-file store attribute \"syntax\" (default: FALSE)? getHTM Store index.html attribute \"HTML\" (default: FALSE)?","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/read_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files created of the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — read_omv","text":"data frame (can directly used functions included R-package jmv syntax 'jamovi'; also compatible format R-package foreign)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/read_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read files created of the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — read_omv","text":"","code":"if (FALSE) { # \\dontrun{ nmeInp <- system.file(\"extdata\", \"ToothGrowth.omv\", package = \"jmvReadWrite\") data <- jmvReadWrite::read_omv(fleInp = nmeInp, getSyn = TRUE) # if the syntax couldn't be extracted, an empty list - length = 0 - is returned, # otherwise, the commands are shown and the first analysis is run, with the output # from the second analysis being assigned to the variable result if (length(attr(data, \"syntax\")) >= 1) {     print(attr(data, \"syntax\"))     if (nzchar(system.file(package = \"jmv\"))) {         # the print-function is only used to force devtools::run_examples() to show output         eval(parse(text = paste0(\"result = \", attr(data, \"syntax\")[1])))         # without assigning the output to a variable, the command would be:         # eval(parse(text = attr(data, \"syntax\")[1]))         print(names(result))         print(result$main)         # -> \"main\"      \"assump\"    \"contrasts\" \"postHoc\"   \"emm\"       \"residsOV\"         # (the names of the six output tables)     } } } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/replace_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","text":"Search values .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/replace_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","text":"","code":"replace_omv(   dtaInp = NULL,   fleOut = \"\",   rplLst = list(),   whlTrm = TRUE,   varInc = c(),   varExc = c(),   incNum = TRUE,   incOrd = TRUE,   incNom = TRUE,   incID = TRUE,   incCmp = TRUE,   incRcd = TRUE,   psvAnl = FALSE,   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/replace_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","text":"dtaInp Either data frame name jamovi data file read (including path, required; \"FILENAME.omv\"; default: NULL) fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead rplLst list entry vector (length 2) containing original value -replace-value (default: list()) whlTrm Whether search term (first entry vectors) must found exactly (TRUE) whether partial match sufficient (FALSE; default: TRUE) varInc Names variables (character vector) included replacement (default: c()) varExc Names variables (character vector) excluded replacement (default: c()) incNum Whether include continuous variables replacement (default: TRUE) incOrd Whether include ordinal variables replacement (default: TRUE) incNom Whether include nominal variables replacement (default: TRUE) incID Whether include ID variables replacement (default: TRUE) incCmp Whether include Computed variables replacement (default: TRUE) incRcd Whether include Recoded variables replacement (default: TRUE) psvAnl Whether analyses contained input file shall transferred output file (default: FALSE) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/replace_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","text":"data frame (returned fleOut empty) replaced values","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/replace_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","text":"rplLst list. list entry contains vector (length 2), first entry original value, second entry value original value replaced . whlTrm indicates whether partial matches original value(s) shall replaced (e.g., original: 24 replacement: 34, 241 changed 341). varInc varExc determine variables included excluded replacement. given, warning issued varInc takes precedence. varInc makes variables, replacement requested rplLst carried , varExc given, variables input data set, except defined varExc, replacement carried . ellipsis-parameter (...) can used submit arguments / parameters function used reading writing data. Clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/replace_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — replace_omv","text":"","code":"if (FALSE) { # \\dontrun{ bfi_sample <- jmvReadWrite::bfi_sample # the gender in the original data file is plural... table(bfi_sample$gender) # and shall be converted to singular rplDF <- jmvReadWrite::replace_omv(dtaInp = bfi_sample,            rplLst = list(c(\"Females\", \"Female\"), c(\"Males\", \"Male\"))) table(rplDF$gender) # with giving an output file name, the data set is written nmeOut <- tempfile(fileext = \".omv\") jmvReadWrite::replace_omv(bfi_sample, fleOut = nmeOut,   rplLst = list(c(\"Females\", \"Female\"), c(\"Males\", \"Male\"))) file.exists(nmeOut) rplDF <- jmvReadWrite::read_omv(nmeOut) table(rplDF$gender) unlink(nmeOut) # it is sensible to check / search for the original values before running replace_omv jmvReadWrite::search_omv(bfi_sample, 24, whlTrm = TRUE) rplDF <- jmvReadWrite::replace_omv(bfi_sample, rplLst = list(c(24, NA))) table(rplDF$age) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/search_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","text":"Search values .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/search_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","text":"","code":"search_omv(   dtaInp = NULL,   srcTrm = c(),   whlTrm = FALSE,   ignCse = FALSE,   incNum = TRUE,   incOrd = TRUE,   incNom = TRUE,   incID = TRUE,   incCmp = TRUE,   incRcd = TRUE,   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/search_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","text":"dtaInp Either data frame name jamovi data file read (including path, required; \"FILENAME.omv\"; default: NULL) srcTrm (Character numeric) Vector (length = 1) search term found data frame (default: c()) whlTrm Whether exact search term shall found (TRUE) whether partial match sufficient (FALSE; default: FALSE) ignCse Whether ignore case search term (default: FALSE) incNum Whether include continuous variables search (default: TRUE) incOrd Whether include ordinal variables search (default: TRUE) incNom Whether include nominal variables search (default: TRUE) incID Whether include ID variables search (default: TRUE) incCmp Whether include Computed variables search (default: TRUE) incRcd Whether include Recoded variables search (default: TRUE) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/search_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","text":"named list places search term found: names list variables / columns, entries respective row names within variable / column (row names used tolerant filtered-cases jamovi, filter used, row numbers incorrect)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/search_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","text":"ellipsis-parameter (...) can used submit arguments / parameters function used reading writing data. Clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/search_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search values in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — search_omv","text":"","code":"if (FALSE) { # \\dontrun{ # the exact value 24 appears 13 times in age bfi_sample <- jmvReadWrite::bfi_sample jmvReadWrite::search_omv(bfi_sample, 24, whlTrm = TRUE) # taking the fifth entry from the search results bfi_sample[\"61\", \"age\"] # with the following search, both Males and Females are found # (the M of Males, wouldn't be matched if ignCse were FALSE and males is #  only a partial match within Females, thus whlTrm must be set to FALSE) jmvReadWrite::search_omv(bfi_sample, \"males\", whlTrm = FALSE, ignCse = TRUE) # the first entry is a female, the first entry is a male bfi_sample[\"1\", \"gender\"] # Females bfi_sample[\"6\", \"gender\"] # Males # using the search results assigned to a variable srcRes <- jmvReadWrite::search_omv(bfi_sample, \"males\", whlTrm = FALSE, ignCse = TRUE) bfi_sample[srcRes[[1]][1], names(srcRes[1])] # Females bfi_sample[srcRes[[1]][6], names(srcRes[1])] # Males } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/sort_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","title":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","text":"Sort data (using one variables) .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/sort_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","text":"","code":"sort_omv(   dtaInp = NULL,   fleOut = \"\",   varSrt = c(),   psvAnl = FALSE,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/sort_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varSrt Variable(s) used sort data frame (see Details; default: c()) psvAnl Whether analyses contained input file shall transferred output file (TRUE / FALSE; default: FALSE) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/sort_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","text":"data frame (returned fleOut empty) input data set sorted (according variables varSrt)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/sort_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","text":"varSrt can either character character vector (one variables respectively). sorting order particular variable can inverted preceding variable name \"-\". Please note make sense hence throws warning certain variable types (e.g., factors). ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/sort_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort data (using one or more variables) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — sort_omv","text":"","code":"if (FALSE) { # \\dontrun{ nmeInp <- system.file(\"extdata\", \"AlbumSales.omv\", package = \"jmvReadWrite\") nmeOut <- tempfile(fileext = \".omv\") jmvReadWrite::sort_omv(dtaInp = nmeInp, fleOut = nmeOut, varSrt = \"Image\") dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) cat(dtaFrm$Image) # shows that the variable \"Image\" is sorted in ascending order cat(is.unsorted(dtaFrm$Image)) # is.unsorted (which checks for whether the variable is NOT sorted) returns FALSE jmvReadWrite::sort_omv(dtaInp = nmeInp, fleOut = nmeOut, varSrt = \"-Image\") # variables can also be sorted in descending order by preceding them with \"-\" dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) cat(dtaFrm$Image) # shows that the variable \"Image\" is now sorted in descending order cat(is.unsorted(dtaFrm$Image)) # this first returns TRUE (the variable is not in ascending order, i.e., unsorted) cat(is.unsorted(-dtaFrm$Image)) # if the sign of the variable is changed, it returns FALSE (i.e., the variable is # NOT unsorted) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transform_vars_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","title":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","text":"Transform skewed variables (aiming conform normal distribution) .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transform_vars_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","text":"","code":"transform_vars_omv(   dtaInp = NULL,   fleOut = \"\",   varXfm = NULL,   psvAnl = FALSE,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transform_vars_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varXfm Named list variable name indicates transformation carried list entry points one variables transformed using transformation. See Details information. psvAnl Whether analyses contained input file shall transferred output file (default: FALSE) usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transform_vars_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","text":"data frame (returned fleOut empty) order variables / columns input data set re-arranged","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transform_vars_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","text":"varXfm named list variable names can either indicate type transformation kind degree skewness shall corrected. type transformation, following names valid: posSqr, negSqr, posLog, negLog, posInv, negInv; second part name indicates transformation carried : ...Sqr - square root, ...Log - logarithm basis 10, ...Inv - inversion, .e., 1 / original value), first part name indicates whether original value used (pos...) whether original value subtracted maximum value variable (neg...; constant 1 added maximum value ...Log ...Inv transformations). degree kind skewness, following names valid: mdrPos, strPos, svrPos, mdrNeg, strNeg, svrNeg (degree: moderate, strong, severe; kind: positive negative). ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transform_vars_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform skewed variables (aiming at they conform to a normal distribution) in .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transform_vars_omv","text":"","code":"if (FALSE) { # \\dontrun{ # generate skewed variables set.seed(335) dtaInp <- data.frame(MP = rnorm(1000) * 1e-1 + rexp(1000, 2) * (1 - 1e-1),                      MN = rnorm(1000) * 1e-1 - rexp(1000, 2) * (1 - 1e-1),                      SP = rnorm(1000) * 1e-2 + rexp(1000, 2) * (1 - 1e-2),                      SN = rnorm(1000) * 1e-2 - rexp(1000, 2) * (1 - 1e-2),                      EP = rnorm(1000) * 1e-4 + rexp(1000, 2) * (1 - 1e-4),                      EN = rnorm(1000) * 1e-4 - rexp(1000, 2) * (1 - 1e-4)) jmv::descriptives(data = dtaInp, skew = TRUE, sw = TRUE)  crrXfm <- list(posSqr = c(\"MP\"), negSqr = c(\"MN\"), posLog = c(\"MP\", \"SP\"), negLog = c(\"SN\"),                posInv = c(\"MP\", \"SP\", \"EP\"), negInv = c(\"EN\")) dtaOut <- jmvReadWrite::transform_vars_omv(dtaInp = dtaInp, varXfm = crrXfm) jmv::descriptives(data = dtaOut, skew = TRUE, sw = TRUE)  crrXfm <- list(mdrPos = c(\"MP\"), mdrNeg = c(\"MN\"), strPos = c(\"SP\"), strNeg = c(\"SN\"),                svrPos = c(\"EP\"), svrNeg = c(\"EN\")) dtaOut <- jmvReadWrite::transform_vars_omv(dtaInp = dtaInp, varXfm = crrXfm) jmv::descriptives(data = dtaOut, skew = TRUE, sw = TRUE)  } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transpose_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","title":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","text":"Transpose .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transpose_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","text":"","code":"transpose_omv(   dtaInp = NULL,   fleOut = \"\",   varNme = \"\",   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transpose_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varNme Name variables output data frame; see Details usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transpose_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","text":"data frame (returned fleOut empty) input data set transposed","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transpose_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","text":"varNme empty, row names input data set used (preceded \"V_\" row names numbers); varNme length 1, supposed point variable input data frame; varNme length number rows input data frame, values varNme assigned column names output data frame. ellipsis-parameter (...) can used submit arguments / parameters functions used reading writing data. clicking respective function “See also”, can get detailed overview parameters functions take. functions : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/transpose_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — transpose_omv","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) tmpDF <- stats::setNames(as.data.frame(matrix(sample(6, 1200, replace = TRUE), nrow = 16)),                          sprintf(\"sbj_%03d\", seq(75))) str(tmpDF) # Data sets that were extracted, e.g., from PsychoPy, may look like this (trials as rows # and participants as columns, one for each participant, manually assembled / copy-and-pasted). # However, for analyses, one wants the data set transposed (units / participants as columns)... nmeOut <- tempfile(fileext = \".omv\") jmvReadWrite::transpose_omv(dtaInp = tmpDF, fleOut = nmeOut) dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) str(dtaFrm) # if no varNme-parameter is given, generic variable names are created (V_...) jmvReadWrite::transpose_omv(dtaInp = tmpDF, fleOut = nmeOut, varNme = sprintf(\"Trl_%02d\", seq(16))) dtaFrm <- jmvReadWrite::read_omv(nmeOut) unlink(nmeOut) str(dtaFrm) # alternatively, the character vector with the desired variable names (of the same length as # the number of rows in tmpDF) may be given, \"Trl\" can easily be exchanged by the name of your # questionnaire, experimental conditions, etc. } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/wide2long_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","text":"Converts .omv-files statistical spreadsheet 'jamovi' (https://www.jamovi.org) wide long format","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/wide2long_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","text":"","code":"wide2long_omv(   dtaInp = NULL,   fleOut = \"\",   varLst = c(),   varExc = c(),   varID = NULL,   varTme = \"cond\",   varSep = \"_\",   varOrd = TRUE,   varSrt = c(),   excLvl = NULL,   usePkg = c(\"foreign\", \"haven\"),   selSet = \"\",   ... )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/wide2long_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","text":"dtaInp Either data frame name data file read (including path, required; \"FILENAME.ext\"; default: NULL); files can supported file type, see Details fleOut Name data file written (including path, required; \"FILE_OUT.omv\"; default: \"\"); empty, resulting data frame returned instead varLst List / set variables transformed single (time-varying) variables long format (default: c()) varExc Name variable(s) excluded transformation, typically -subject-variable(s) (default: c()) varID Name(s) one variables (created ) identify group / individual (empty, \"ID\" added row numbers identifying cases; default: NULL) varTme Name variable (created ) differentiate multiple records group / individual (default: \"cond\"; counter added time-varying part) varSep Character separates variables varLst time-varying part part forms variable name long format (\"\" \"VAR_1\", \"VAR_2\", default: \"\") varOrd Whether arrange variables transformation, accordance different split levels (default: TRUE) varSrt Variable(s) used sort data frame (see Details; empty, order returned reshape kept; default: c()) excLvl Integer (vector integers) determining parts variable names varLst shall transformed (default: NULL), see Details usePkg Name package: \"foreign\" \"haven\" shall used read SPSS, Stata SAS files; \"foreign\" default (comes base R), \"haven\" newer comprehensive selSet Name data set selected workspace (applies reading .RData-files) ... Additional arguments passed methods; see Details ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/wide2long_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","text":"data frame (returned fleOut empty) input data set converted wide long format","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/wide2long_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","text":"varLst empty, tried generate using variables data frame except defined varExc varID. variable(s) varID need unique identifiers (original dataset), varExc requirement. recommended variable names varExc varID contain variable separator (defined varSep; default: \"_\"). varOrd determines whether variables rearranged match order split levels. Consider varLst X_1, Y_1, X_2, Y_2. varOrd set FALSE, original order preserved second part variable name (1, 2, ...) become condition 1, first part condition 2. cases, leaving varOrd set TRUE recommended. varSrt can either character character vector (one variables respectively). sorting order particular variable can inverted preceding variable name \"-\". Please note make sense hence throws warning certain variable types (e.g., factors). exclLvl points part variable names varLst excluded. example, variable name PART1_PART2_PART3 (split _), excLvl = 1 exclude PART1 transformation. Quite often, one one variable particular type (e.g., responses, reaction times, etc.). typically first part variable name varLst (conditions PART2, PART3, ). excLvl = 1 exclude variable types / categories transformed long (.e., kept separate columns). ellipsis-parameter (...) can used submit arguments / parameters functions used transforming reading data. clicking respective function “See also”, can get detailed overview parameters functions take. transformation long wide uses reshape: varID matches (~) idvar reshape, varTme ~ timevar, varLst ~ varying, varSep ~ sep. help reshape explanatory, click link “See also” access , particularly explained “Details”. functions reading writing data : read_omv write_omv (jamovi-files), read.table (CSV / TSV files; using similar defaults read.csv CSV read.delim TSV based upon read.table), load (.RData-files), readRDS (.rds-files), read_sav (needs R-package haven) read.spss (needs R-package foreign) SPSS-files, read_dta (haven) / read.dta (foreign) Stata-files, read_sas (haven) SAS-data-files, read_xpt (haven) / read.xport (foreign) SAS-transport-files. like use haven, may need install using install.packages(\"haven\", dep = TRUE).","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/wide2long_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts .omv-files for the statistical spreadsheet 'jamovi' (https://www.jamovi.org) from wide to long format — wide2long_omv","text":"","code":"if (FALSE) { # \\dontrun{ # generate a test dataframe with 100 (imaginary) participants / units of # observation (ID), and 8 repeated measurements of variable (X_1, X_2, ...) dtaInp <- cbind(data.frame(ID = as.character(seq(1:100))),                 stats::setNames(                     as.data.frame(matrix(runif(800, -10, 10), nrow = 100)),                     paste0(\"X_\", 1:8))) cat(str(dtaInp)) # 'data.frame':  100 obs. of  9 variables: #  $ ID : chr  \"1\" \"2\" \"3\" \"4\" ... #  $ X_1: num  ... #  $ X_2: num  ... #  $ X_3: num  ... #  $ X_4: num  ... #  $ X_5: num  ... #  $ X_6: num  ... #  $ X_7: num  ... #  $ X_8: num  ... # this data set is stored as (temporary) RDS-file and later processed by wide2long nmeInp <- tempfile(fileext = \".rds\") nmeOut <- tempfile(fileext = \".omv\") saveRDS(dtaInp, nmeInp) jmvReadWrite::wide2long_omv(dtaInp = nmeInp, fleOut = nmeOut, varID = \"ID\",     varTme = \"measure\", varLst = setdiff(names(dtaInp), \"ID\"),     varSrt = c(\"ID\", \"measure\")) # it is required to give at least the arguments dtaInp (if dtaInp is a data frame, # fleOut needs to be provided too) and varID # \"reshape\" then assigns all variables expect the variable defined by varID to # varLst (but throws a warning) # varSrt enforces sorting the data set after the transformation (sorted, the # measurements within one person come after another; unsorted all measurements # for one repetition would come after another)  # check whether the file was created and its size cat(list.files(dirname(nmeOut), basename(nmeOut))) # -> \"file[...].omv\" ([...] contains a random combination of numbers / characters cat(file.info(nmeOut)$size) # -> 6939 (approximate size; size may differ in every run [in dependence of how #          well the generated random data can be compressed]) cat(str(jmvReadWrite::read_omv(nmeOut, sveAtt = FALSE))) # the data set is now transformed into long (and each the measurements is now # indicated by the \"measure\") # 'data.frame':  800 obs. of  3 variables: #  $ ID     : Factor w/ 100 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 1 1 1 1 1 1 2 2 ... #   ..- attr(*, \"missingValues\")= list() #  $ measure: Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 6 7 8 1 2 ... #   ..- attr(*, \"missingValues\")= list() #  $ X      : num  ... #   ..- attr(*, \"missingValues\")= list()  unlink(nmeInp) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/write_omv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","title":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","text":"Write files used statistical spreadsheet 'jamovi' (https://www.jamovi.org)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/write_omv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","text":"","code":"write_omv(   dtaFrm = NULL,   fleOut = \"\",   wrtPtB = FALSE,   frcWrt = FALSE,   retDbg = FALSE )"},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/write_omv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","text":"dtaFrm Data frame exported (default: NULL) fleOut Name / position output file generated (\"FILENAME.omv\"; default: \"\") wrtPtB Whether write protocol buffers (see Details; default: FALSE) frcWrt Whether overwrite existing files name (see Details; default: FALSE) retDbg Whether return list debugging information (see Value; default: FALSE)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/write_omv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","text":"list (retDbg == TRUE), containing meta data (mtaDta, metadata.json OMV-file), extended data (xtdDta, xdata.json OMV-file) original data frame (dtaFrm)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/write_omv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","text":"jamovi specific measurement level / type \"ID\" (addition \"standard\" ones \"Nominal\", \"Ordinal\", \"Continuous\"). \"ID\" used columns contain form ID (e.g., participant code). order set variable data frame \"ID\", set attribute jmv-id (e.g., attr(dtaFrm$column, \"jmv-id\") = TRUE). CAUTION: Setting wrtPtB TRUE currently overwrites analyses already exist data file. meant used describe_omv . set wrtPtB TRUE, ensure use output file name overwrite existing file. Protocol buffers used exchange data different parts jamovi (server client) also format analyses stored jamovi data files. write_omv checks whether output file already exists throws error case. frcWrt permits overwrite existing file.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/reference/write_omv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write files to be used with the statistical spreadsheet 'jamovi' (https://www.jamovi.org) — write_omv","text":"","code":"if (FALSE) { # \\dontrun{ # use the data set \"ToothGrowth\" and, if it exists, write it as # jamovi-file using write_omv() jmvReadWrite::ToothGrowth nmeOut <- tempfile(fileext = \".omv\") # typically, one would use a \"real\" file name instead of tempfile(), # e.g., \"Data1.omv\" dtaDbg = jmvReadWrite::write_omv(dtaFrm = ToothGrowth, fleOut = nmeOut, retDbg = TRUE) print(names(dtaDbg)) # the print-function is only used to force devtools::run_examples() # to show output # -> \"mtaDta\" \"xtdDta\" \"dtaFrm\" # returns a list with the metadata (mtaDta, e.g., column and data type), # the extended data (xtdDta, e.g., variable lables), and the data frame # (dtaFrm) the purpose of these variables is merely for checking (under- # standing the file format) and debugging  # check whether the file was written to the disk, get the file informa- # tion (size, etc.) and delete the file afterwards print(list.files(dirname(nmeOut), basename(nmeOut))) # -> \"file[...].omv\" ([...] is a combination of random numbers / characters print(file.info(nmeOut)$size) # -> approx. 2600 (size may differ on different OSes) unlink(nmeOut) } # }"},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-048","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.8","title":"jmvReadWrite 0.4.8","text":"CRAN release: 2024-11-09","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-0-4-8","dir":"Changelog","previous_headings":"","what":"Enhancements:","title":"jmvReadWrite 0.4.8","text":"added distances_omv: calculate wide range distance measures (either variables units observation) standardized original data","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-0-4-8","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"jmvReadWrite 0.4.8","text":"improved treatment factors stored corrected bug unit tests resulting R 4.5 (current development) begins treat Date variables integers","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-047","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.7","title":"jmvReadWrite 0.4.7","text":"CRAN release: 2024-07-09","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-0-4-7","dir":"Changelog","previous_headings":"","what":"Enhancements:","title":"jmvReadWrite 0.4.7","text":"added transform_vars_omv: apply transformations - calculating square root, logarithm base 10 inversion - make variables (better) conform normal contribution (incl. unit tests)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-0-4-7","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"jmvReadWrite 0.4.7","text":"fixed small bugs read_omv write_omv better handle variable labels","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-046","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.6","title":"jmvReadWrite 0.4.6","text":"CRAN release: 2024-05-22","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-0-4-6","dir":"Changelog","previous_headings":"","what":"Enhancements:","title":"jmvReadWrite 0.4.6","text":"added workflow rhub reduced cyclomatic complexity replace_omv, wide2long_omv, jmvAtt","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-0-4-6","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"jmvReadWrite 0.4.6","text":"ensure dataType attribute preserved / honoured write_omv (earlier , data type variable / column determined logic changed class column) fixed bug leading error write_omv columns completely empty (.e., contained NAs; incl. respective unit tests)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-045","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.5","title":"jmvReadWrite 0.4.5","text":"CRAN release: 2024-04-04","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fix-0-4-5","dir":"Changelog","previous_headings":"","what":"Bug fix:","title":"jmvReadWrite 0.4.5","text":"change long2wide_omv handle (omit) NAs aggregating values (incl. unit tests)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-044","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.4","title":"jmvReadWrite 0.4.4","text":"CRAN release: 2024-02-27","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-0-4-4","dir":"Changelog","previous_headings":"","what":"Enhancements:","title":"jmvReadWrite 0.4.4","text":"added var_labels_omv (assign labels variables data set; including unit tests, files tests examples)","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-4-3","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.4.3","text":"replaced sapply vapply lapply (accordance goodpractice) reducing cyclomatic complexity 30 fixed bugs created test cases rplAtt (replace non-UTF UTF characters, part read_omv) added invisible(NULL)NULL nothing returned adjust strsplit long2wide_omv wide2long_omv order permit “.” varSep added codemeta.json, badge package status, contribute package (pkgcheck) added documentation return value convert_to_omv","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-042","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.2","title":"jmvReadWrite 0.4.2","text":"CRAN release: 2023-11-22","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.4.2","text":"check empty rows missing values within varID merge_cols_omv corrected replacement numerical values replace_omv replaced occurrences library(jmvReadWrite) smaller corrections documentation (added parameter descriptions) added unit tests replace_omv (replacement character columns) adjusted wide2long_omv order accept NULL varID","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-041","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.1","title":"jmvReadWrite 0.4.1","text":"CRAN release: 2023-10-05","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fix-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fix:","title":"jmvReadWrite 0.4.1","text":"ensure examples, tests creating vignette also works jmv present","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-040","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.4.0","title":"jmvReadWrite 0.4.0","text":"CRAN release: 2023-08-16","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-and-bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Enhancements and bug fixes:","title":"jmvReadWrite 0.4.0","text":"added describe_omv (put title description top data set), search_omv (finding values data set) replace_omv (replacing values data set values) improved handling jamovi (jmvReadWrite run jamovi modules, e.g., Rj, new jamovi session opened data set modified one helper functions) improved handling jamovi protocol buffers (currently used extracting jmv-syntax data sets, perspective creating analyses jmv-syntax) update content index.html (generated writing data set write_omv line recent versions jamovi) added attaching dataType measureType attributes data frame write_omv called within jamovi (ensuring overwrite existing measureType / dataType attributes) enforce jmv-id-status ID-variable variable unique long2wide_omv removed fleOut inp2DF (making impossible attach fleOut attribute data frame) - earlier, output file name “assembled” adding suffix input file name, leaving fleOut empty return resulting data frame became obsolete added drop = FALSE sort_omv prevent reduction vector added unit-tests globals, read_omv, write_omv improved documentation (adding missing information, better formatting, etc.)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-038","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.8","title":"jmvReadWrite 0.3.8","text":"CRAN release: 2023-07-15","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-and-bug-fixes-0-3-8","dir":"Changelog","previous_headings":"","what":"Enhancements and bug fixes:","title":"jmvReadWrite 0.3.8","text":"adjustments make jmvReadWrite suited using together jamovi-module jTransform (https://github.com/sjentsch/jTransform) implement reading data frames file names merge_cols_omv merge_rows_omv (incl. phasing fleInp parameter helper functions: now throws error prevent using ) initial handling weights read_omv write_omv improvements corrections long2wide_omv (added aggregation, mean take first, fixed bug led incorrect naming variables transforming complex data sets) improvements corrections wide2long_omv (added parameter excLvl, prevent measurements (one) also transformed long; fixed bug led incorrect order values within variables transforming complex data sets) improved unit tests (implementation regular expressions expect_error expect_warning, bug-fixes additional coverage) improvements setting attributes (setAtt, e.g., metadata data frame vice versa) improved handling factors numerical values (measureType Nominal Ordinal dataType Integer) added function jmvAtt attach attributes measureType dataType data frames coming inside jamovi (.e., jmvReadWrite used modules, e.g., Rj) OBS: rather internal use thus exported, use jmvReadWrite:::jmvAtt() call smaller bug fixes (typos, ensure consistency naming, etc.)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-037","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.7","title":"jmvReadWrite 0.3.7","text":"CRAN release: 2023-07-03","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-and-bug-fixes-0-3-7","dir":"Changelog","previous_headings":"","what":"Enhancements and bug fixes:","title":"jmvReadWrite 0.3.7","text":"added transpose_omv (transpose data frame write resulting jamovi-file) enable either data frames strings file name input helper functions arrange_cols_omv, long2wide_omv, wide2long_omv, sort_omv, transpose_omv preserve attributes merging columns (merge_cols_omv) changed R-package handles JSON files RJSON jsonlite bug fixes: added check fmtFlO ensure output files jamovi-format (.omv); removed typos, etc.","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-036","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.6","title":"jmvReadWrite 0.3.6","text":"CRAN release: 2023-06-26","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-and-bug-fixes-0-3-6","dir":"Changelog","previous_headings":"","what":"Enhancements and bug fixes:","title":"jmvReadWrite 0.3.6","text":"added arrange_cols_omv (change order variables / columns jamovi-files) added parameter psvAnl preserve analyses data files (arrange_cols_omv, merge_cols_omv, sort_omv makes sense – number rows / participants / units doesn’t change) bug fixes: corrected error chkFle, removed duplicate functions globals.R","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-035","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.5","title":"jmvReadWrite 0.3.5","text":"CRAN release: 2023-05-27","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-3-5","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.3.5","text":"fixed error led warning adding columns (make different data frames set variables) merge_cols_omv added logo citation","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-034","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.4","title":"jmvReadWrite 0.3.4","text":"CRAN release: 2023-05-06","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-3-4","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.3.4","text":"fixed error led crash ID variable contained empty values (““) general bug fixes improvements (removing ;s suggested lintr, etc.)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-033","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.3","title":"jmvReadWrite 0.3.3","text":"CRAN release: 2022-08-09","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-and-bug-fixes-0-3-3","dir":"Changelog","previous_headings":"","what":"Enhancements and bug fixes:","title":"jmvReadWrite 0.3.3","text":"made replacements using regular expressions compatible R >= 4.3 (changing occurrences replacement pattern included \\xNN) improvements wide2long_omv long2wide_omv (can now handle several factors, one) improvement write_omv handles / stores factors (now zero-based accordance programming languages including Python C++ used jamovi engine) simplify handling variables measurement type “ID” (converted / treated character) simplify handling variable labels (now, attribute label, e.g., importing files using haven, converted jamovi-conforming jmv-desc) adding unit tests changed web-addresses canonical format (.e., including protocol angle brackets; help, documentation, etc.) general bug fixes improvements (simplifying code)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-032","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.2","title":"jmvReadWrite 0.3.2","text":"CRAN release: 2022-05-21","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.3.2","text":"added warning packages required extraction syntax can’t carried due missing dependencies","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-031","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.1","title":"jmvReadWrite 0.3.1","text":"CRAN release: 2022-02-28","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.3.1","text":"fixed “bug” testthat-condition resulted error several systems","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-030","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.3.0","title":"jmvReadWrite 0.3.0","text":"CRAN release: 2022-02-13","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-and-bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Enhancements and bug fixes:","title":"jmvReadWrite 0.3.0","text":"added couple helper functions: convert_to_omv (converts data sets formats - CSV, R, SPSS, SAS, Stata - .omv) merge_cols_omv (merges two data sets concatenating columns) merge_rows_omv (merges two data sets concatenating rows) long2wide_omv (converts data sets long wide, e.g., running mixed-model-analyses jamovi) wide2long_omv (converts data sets wide long, e.g., running mixed-model-analyses jamovi) sort_omv (sorts dataset according one variable) implemented unit tests code coverage read_omv, write_omv, convert_to_omv, merge_cols_omv, merge_rows_omv, long2wide_omv, wide2long_omv, sort_omv implemented treating variables read_omv write_omv ordered factor measureType value Ordinal default sveAtt read_omv (now TRUE; makes sense store attributes default since write_omv give exact copy original data set stored helper functions also respect adjust )","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-024","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.2.4","title":"jmvReadWrite 0.2.4","text":"CRAN release: 2022-01-20","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-2-4","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.2.4","text":"fixed error assembling file name write_omv, added assembling file name normalizePath read_omv fixed missing retDbg-parameter one examples","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-023","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.2.3","title":"jmvReadWrite 0.2.3","text":"CRAN release: 2022-01-19","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-2-3","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.2.3","text":"use zip R-package instead utils prevent ZIP-executable-file found Windows (utils::zip works cases zip.exe found path) use (session-specific) temporary directory creating files zipped files extracted improved handling different variable types, implemented logical / boolean variables / data columns improved handling column attributes added parameter retDbg (default: FALSE) write_omv output debugging produced upon setting ","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-022","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.2.2","title":"jmvReadWrite 0.2.2","text":"CRAN release: 2021-09-20","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.2.2","text":"bug fix read_omv (libraries required syntax extraction available certain platforms (Solaris, Windows MinGW) added documentation (pkgdown) docs/ set examples lintr","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-021","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.2.1","title":"jmvReadWrite 0.2.1","text":"CRAN release: 2021-08-23","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"bug-fixes-and-enhancements-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes and enhancements:","title":"jmvReadWrite 0.2.1","text":"bug write_omv fixed (@MAgojam, #2); jamovi read manifest (meta) file created write_omv Windows (LF + CR, CR expected / decoded) updated Created-manifest string use jmvReadWrite version improved README (switched generated Rmd vignette included","code":""},{"path":[]},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"enhancements-0-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements:","title":"jmvReadWrite 0.2.0","text":"renamed jmvRead read_omv, jmvWrite write_omv extracts syntax analyses contained .omv-file (set parameter getSyn = TRUE; default FALSE) imports output .omv-file (set parameter getHTM = TRUE; default FALSE)","code":""},{"path":"https://sjentsch.github.io/jmvReadWrite/news/index.html","id":"jmvreadwrite-010","dir":"Changelog","previous_headings":"","what":"jmvReadWrite 0.1.0","title":"jmvReadWrite 0.1.0","text":"CRAN release: 2020-09-16 first implementation, reads (jmvRead) writes (jmvWrite) files using file format similar jamovi 1.2 (can read recent versions)","code":""}]
